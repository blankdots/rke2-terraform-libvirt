#cloud-config

hostname: ${HOSTNAME}
ssh_pwauth: false
no_ssh_fingerprints: false
ssh:
  emit_keys_to_console: false
users:
  - name: ${KUBERNETES_NODE_SSH_USERNAME} 
    sudo: ALL=(ALL) NOPASSWD:ALL
    lock_passwd: true
    ssh_authorized_keys:
      - ${KUBERNETES_NODE_PUBLIC_KEY}

# for the hardening: https://docs.rke2.io/security/hardening_guide/#rke2-configuration
write_files:
  - content: |
      token: ${KUBERNETES_JOIN_TOKEN}
      write-kubeconfig-mode: "0644"
      secrets-encryption: "true"
      node-label:
        - "nodetype=master"
      profile: "cis-1.6"
    path: /etc/rancher/rke2/config.yaml

package_update: true

runcmd:
  # Init Docker section
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - apt-add-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

  # Enable container traffic through the bridge network
  - echo 1 > /proc/sys/net/bridge/bridge-nf-call-arptables
  - echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
  - echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
  - echo "net.bridge.bridge-nf-call-arptables = 1" >> /etc/sysctl.conf
  - echo "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf
  - echo "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf

  # Global update
  - apt-get update

  # Install Docker section
  - sudo apt install docker-ce docker-ce-cli containerd.io -yq
  - sudo usermod -aG docker kubernetes
  - systemctl enable docker containerd
  - systemctl start docker containerd

  # Configure iptables persistent
  - sudo DEBIAN_FRONTEND=noninteractive apt install iptables-persistent netfilter-persistent -yq 
  - sudo systemctl enable netfilter-persistent.service
  - sudo systemctl start netfilter-persistent.service 

  # Set default chain policies
  - sudo iptables -P INPUT DROP
  - sudo iptables -P FORWARD DROP
  - sudo iptables -P OUTPUT ACCEPT

  # Accept on localhost
  - sudo iptables -A INPUT -i lo -j ACCEPT
  - sudo iptables -A OUTPUT -o lo -j ACCEPT

  # Allow established sessions to receive traffic
  - sudo iptables -A INPUT -m "conntrack" --ctstate ESTABLISHED,RELATED -j ACCEPT

  # Rules specific for RKE2 communication
  # check: https://docs.rke2.io/install/requirements/#networking
  - sudo iptables -A INPUT -p tcp --dport 6443 -j ACCEPT
  - sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
  - sudo iptables -A INPUT -p tcp -s ${KUBERNETES_NODES_IPS}%{ if KUBERNETES_MASTER_IPS != "" },${KUBERNETES_MASTER_IPS}%{ else }%{ endif } --dport 9345 -j ACCEPT
  - sudo iptables -A INPUT -p tcp -s ${KUBERNETES_NODES_IPS}%{ if KUBERNETES_MASTER_IPS != "" },${KUBERNETES_MASTER_IPS}%{ else }%{ endif } --match multiport --dports 2379,2380 -j ACCEPT -m "etcd client/peer ports"
  - sudo iptables -A INPUT -p tcp -s ${KUBERNETES_NODES_IPS}%{ if KUBERNETES_MASTER_IPS != "" },${KUBERNETES_MASTER_IPS}%{ else }%{ endif } --match multiport --dports 10250,4240,9099 -j ACCEPT
  - sudo iptables -A INPUT -p udp -s ${KUBERNETES_NODES_IPS}%{ if KUBERNETES_MASTER_IPS != "" },${KUBERNETES_MASTER_IPS}%{ else }%{ endif } --match multiport --dports 4789,8472,51820,51821 -j ACCEPT
  - sudo iptables -A INPUT -p icmp -s ${KUBERNETES_NODES_IPS}%{ if KUBERNETES_MASTER_IPS != "" },${KUBERNETES_MASTER_IPS}%{ else }%{ endif } --icmp-type {8|0}  -j ACCEPT

  # Save iptables so we can reload at restart
  - sudo mkdir -p /etc/iptables
  - sudo iptables-save | sudo tee /etc/iptables/rules.v4
  - sudo ip6tables-save | sudo tee /etc/iptables/rules.v6

  # Install wireguard for kernel < 5.6
  - sudo apt install wireguard -yq

  # Install RKE2
  - sudo useradd -r -c "etcd user" -s /sbin/nologin -M etcd -U
  - curl -sfL https://get.rke2.io | sh -
  - systemctl enable rke2-server.service
  - systemctl start rke2-server.service
  - sudo cp -f /usr/local/share/rke2/rke2-cis-sysctl.conf /etc/sysctl.d/60-rke2-cis.conf
  - sudo systemctl restart systemd-sysctl
  - sleep 30

final_message: "Kubernetes server installed and ready"
